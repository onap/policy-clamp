# ============LICENSE_START=======================================================
# Copyright (C) 2021 Nordix Foundation.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# ============LICENSE_END=========================================================

tosca_definitions_version: tosca_simple_yaml_1_2

capability_types:
  #producer capability type
  org.onap.EventProducer:
    derived_from: tosca.capabilities.Root
    properties:
      carrier_protocol_type:
        type: string
        required: true
        constraints:
          valid_values: [ DMAAP_message_router,  REST ]
          #all valid values should be added here
      data_format:
        type: string
        required: true
        constraints:
          valid_values: [ JSON, YAML, JMS ]
          #all valid values should be added here
      event_format:
        type: string
        required: true
        #examples for event_format: Ves_specification, etc.
      event_format_version:
        type: string
        #examples for event_format_version: 5.28.4, 7.30.1, etc.
      config_keys:
        type: list
        required: false
        entry_schema:
          type: string
          constraints:
            #valid_values: [ ]
              #all valid values should be added here
              #if not specified, events of any config key may be generated
              #examples for config_key: ves-measurement, ves-syslog, tca_handle_out, etc.


  #consumer capability type
  org.onap.EventConsumer:
    derived_from: tosca.capabilities.Root
    properties:
      carrier_protocol_type:
        type: string
        required: true
        constraints:
          valid_values: [ DMAAP_message_router, REST ]
          #all valid values should be added here
      data_format:
        type: string
        required: true
        constraints:
          valid_values: [ JSON, YAML, JMS ]
          #all valid values should be added here
      event_format:
        type: string
        required: true
        #examples for event_format: Ves_specification, LinkUp, VnfConfigured, etc.
      event_format_version:
        type: string
        #examples for event_format_version: 5.28.4, 7.30.1, etc.
      config_keys:
        type: list
        required: false
        entry_schema:
          type: string
          constraints:
            #valid_values: [ ]
              #all valid values should be added here
              #if not specified, events of any config key may be generated
              #examples for config_key: ves-measurement, ves-syslog, tca_handle_out, etc.


relationship_types:
  #the relationship type used on requirements to org.onap.EventProducer and org.onap.EventConsumer capabilities
  org.onap.PropagateEvent:
    derived_from: tosca.relationships.Root
    properties:
    config_keys:
      type: list
      required: false
      description: >
        Filters events by specific config_keys to be transferred by this relationship.
        That is, any event with a specific config_key found in the list is transferred.
        If list is not defined or is empty, events with all config_keys are transferred.
      entry_schema: string



node_types:
  #base app node type
  org.onap.APP:
    derived_from: tosca.nodes.Root
    properties:
      application_name:
        type: string
        description: Human readable name for the application Product
        required: false
      provider:
        type: string
        description: Provider of the application and of the descriptor
        required: true
      application_version:
        type: string
        description: Software version of the application
        required: true
      blueprint_id:
        type: string
        description: A reference to the app blueprint
      monitoring_policy:
        type: string
        required: false
        description: A reference to the monitoring policy
    requirements:
      - receive:
          capability: org.onap.EventProducer
          relationship: org.onap.PropagateEvent
          occurrences: [0, UNBOUNDED]
      - send:
          capability: org.onap.EventConsumer
          relationship: org.onap.PropagateEvent
          occurrences: [0, UNBOUNDED]

  #the event relay node type
  org.onap.EventRelay:
    derived_from: tosca.nodes.Root
    properties:
      event_format:
        type: string
        required: true
        #examples for event_format: Ves_specification, etc.
      event_format_version:
        type: string
        required: true
        #examples for event_format_version: 5.28.4, 7.30.1, etc.
      config_keys:
        type: list
        required: false
        entry_schema:
          type: string
          constraints:
            #valid_values: [ ]
              #all valid values should be added here
              #if not specified, events of any config key is relayed
              #examples for config_key: ves-measurement, ves-syslog, tca_handle_out, etc.
      supported_carrier_protocols:
        type: map
        required: true
        description: >
          A map describing supported carrier protocols and translations. The
          tuples define what protocol combinations are supported on the producer
          and consumer side: e.g. { REST: REST, DMAAP: REST, DMAAP: DMAAP}
        key_schema:
          type: string
          constraints:
            valid_values: [ DMAAP_message_router,  REST ]
            #all valid values should be added here
        entry_schema:
          type: string
          constraints:
            valid_values: [ DMAAP_message_router,  REST ]
            #all valid values should be added here
      supported_data_formats:
        type: map
        required: true
        description: >
          Is a map describing supported data formats and translation. The tuples
          define what protocol combinations are supported on the producer and
          consumer side: e.g. { JSON: JSON, JMS: JSON, YAML:YAML }
        key_schema:
          type: string
          constraints:
            valid_values: [ JSON,  JMS, YAML, etc ]
            #all valid values should be added here
        entry_schema:
          type: string
          constraints:
            valid_values: [ JSON,  JMS, YAML, etc ]
            #all valid values should be added here
    requirements:
      - receive:
          capability: org.onap.EventProducer
          relationship: org.onap.PropagateEvent
          occurrences: [1, UNBOUNDED]
      - send:
          capability: org.onap.EventConsumer
          relationship: org.onap.PropagateEvent
          occurrences: [1, UNBOUNDED]




