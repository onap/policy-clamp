<rests xmlns="http://camel.apache.org/schema/spring">
    <rest>
        <get uri="/v2/loop/getAllNames" outType="java.lang.String[]"
             produces="application/json">
            <route>
                <removeHeaders pattern="*"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Loop')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.LoopController?method=getLoopNames()"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET All Loop names FAILED: ${exception.stacktrace}"/>

                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET All Loop names FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>
        <get uri="/v2/loop/{loopName}" outType="org.onap.policy.clamp.loop.Loop"
             produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Loop')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.LoopController?method=getLoop(${header.loopName})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Loop request failed for loop: ${header.loopName}, ${exception.stacktrace}"/>

                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Loop FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>

        <post uri="/v2/loop/updateGlobalProperties/{loopName}"
              type="com.google.gson.JsonObject" consumes="application/json"
              outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Update the global properties')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <setHeader name="GlobalPropertiesJson">
                        <simple>${body}</simple>
                    </setHeader>
                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.LoopController?method=updateGlobalPropertiesJson(${header.loopName},${header.GlobalPropertiesJson})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('Global Properties UPDATED','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="UPDATE Global properties FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>

                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>UPDATE Global properties FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </post>
        <post uri="/v2/loop/updateOperationalPolicies/{loopName}"
              type="com.google.gson.JsonArray" consumes="application/json"
              outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Update operational policies')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <setHeader name="OperationalPoliciesArray">
                        <simple>${body}</simple>
                    </setHeader>
                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.LoopController?method=updateOperationalPolicies(${header.loopName},${header.OperationalPoliciesArray})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('Operational policies UPDATED','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="UPDATE Operational policies FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('UPDATE Operational policies request FAILED, Error reported: ${exception.message}','ERROR',${exchangeProperty[loopObject]})"/>

                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>UPDATE Operational policies FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </post>
        <post uri="/v2/loop/updateMicroservicePolicy/{loopName}"
              type="org.onap.policy.clamp.policy.microservice.MicroServicePolicy"
              consumes="application/json"
              outType="org.onap.policy.clamp.policy.microservice.MicroServicePolicy"
              produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Update Microservice policies')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <setProperty name="MicroServicePolicyObject">
                        <simple>${body}</simple>
                    </setProperty>

                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.LoopController?method=updateMicroservicePolicy(${header.loopName},${exchangeProperty[MicroServicePolicyObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('Micro Service policies UPDATED','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="UPDATE MicroService policy FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('UPDATE MicroService policy request FAILED, Error reported: ${exception.message}','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>UPDATE MicroService policy FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </post>
        <put uri="/v2/loop/deploy/{loopName}"
             outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName"/>
                <doTry>
                    <log loggingLevel="INFO"
                         message="DCAE DEPLOY request for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'DCAE DEPLOY request')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('DCAE DEPLOY request','INFO',${exchangeProperty[loopObject]})"/>
                    <to uri="direct:deploy-loop"/>

                    <log loggingLevel="INFO"
                         message="DEPLOY request successfully executed for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('DEPLOY request successfully executed','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="DEPLOY request FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('DEPLOY request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>DEPLOY request FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>
        <put uri="/v2/loop/refreshMicroServicePolicyJsonSchema/{loopName}/{microServicePolicyName}"
             outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName|microServicePolicyName"/>
                <doTry>
                    <log loggingLevel="INFO"
                         message="Refresh Micro Service Policy UI for loop: ${header.loopName} and ${header.microServicePolicyName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'REFRESH Micro Service Policy UI request')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.cds.CdsDataInstaller?method=updateCdsServiceProperties(${exchangeProperty[loopObject].getModelService()})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.LoopController?method=refreshMicroServicePolicyJsonRepresentation(${exchangeProperty[loopObject]},${header.microServicePolicyName})"/>
                    <log loggingLevel="INFO"
                         message="REFRESH Micro Service policy request successfully executed for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('REFRESH Micro Service policy request successfully executed','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="REFRESH json schema request FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('REFRESH Json schema request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>REFRESH json schema request FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>
        <put uri="/v2/loop/refreshOperationalPolicyJsonSchema/{loopName}/{operationalPolicyName}"
             outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName|operationalPolicyName"/>
                <doTry>
                    <log loggingLevel="INFO"
                         message="Refresh Operational Policy UI for loop: ${header.loopName} and ${header.operationalPolicyName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'REFRESH Operational Policy UI request')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.cds.CdsDataInstaller?method=updateCdsServiceProperties(${exchangeProperty[loopObject].getModelService()})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.LoopController?method=refreshOperationalPolicyJsonRepresentation(${exchangeProperty[loopObject]},${header.operationalPolicyName})"/>
                    <log loggingLevel="INFO"
                         message="REFRESH operational policy request successfully executed for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('REFRESH operational policy request successfully executed','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="REFRESH json schema request FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('REFRESH Json schema request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>REFRESH json schema request FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>
        <put uri="/v2/loop/undeploy/{loopName}"
             outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName"/>
                <doTry>
                    <log loggingLevel="INFO"
                         message="DCAE UNDEPLOY request for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'DCAE UNDEPLOY request')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('DCAE UNDEPLOY request','INFO',${exchangeProperty[loopObject]})"/>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <to uri="direct:undeploy-loop"/>

                    <log loggingLevel="INFO"
                         message="UNDEPLOY request successfully executed for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('UNDEPLOY request successfully executed','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="UNDEPLOY request FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('UNDEPLOY request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>UNDEPLOY request FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>
        <put uri="/v2/loop/stop/{loopName}"
             outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName"/>
                <doTry>
                    <log loggingLevel="INFO"
                         message="STOP request for loop: ${header.loopName}"/>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*,'STOP request')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('STOP request','INFO',${exchangeProperty[loopObject]})"/>

                    <to uri="direct:remove-all-policy-from-active-pdp-group"/>
                    <log loggingLevel="INFO"
                         message="STOP request successfully executed for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('STOP request successfully executed','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="STOP request FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('STOP request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>STOP request FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>
        <put uri="/v2/loop/restart/{loopName}"
             outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName"/>
                <doTry>
                    <log loggingLevel="INFO"
                         message="RESTART request for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*,'RESTART request')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:load-loop"/>

                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('RESTART request','INFO',${exchangeProperty[loopObject]})"/>

                    <to uri="direct:add-policies-from-loop-to-pdp-group"/>
                    <log loggingLevel="INFO"
                         message="RESTART request successfully executed for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('RESTART request successfully executed','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="RESTART request FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('RESTART request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>RESTART request FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>
        <put uri="/v2/loop/submit/{loopName}"
             outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName"/>
                <doTry>
                    <log loggingLevel="INFO"
                         message="POLICY SUBMIT request for loop: ${header.loopName}"/>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'POLICY SUBMIT request')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('POLICY SUBMIT request','INFO',${exchangeProperty[loopObject]})"/>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">false</simple>
                    </setProperty>
                    <to uri="direct:remove-all-policy-from-active-pdp-group"/>
                    <log loggingLevel="INFO"
                         message="Processing all MICRO-SERVICES policies defined in loop ${exchangeProperty[loopObject].getName()}"/>
                    <split>
                        <simple>${exchangeProperty[loopObject].getMicroServicePolicies()}
                        </simple>
                        <setProperty name="policy">
                            <simple>${body}</simple>
                        </setProperty>
                        <log loggingLevel="INFO"
                             message="Processing Micro Service Policy: ${exchangeProperty[policy].getName()}"/>
                        <setProperty name="raiseHttpExceptionFlag">
                            <simple resultType="java.lang.Boolean">false</simple>
                        </setProperty>
                        <to uri="direct:delete-policy-from-loop-object"/>
                        <to uri="direct:create-policy-from-loop-object"/>
                    </split>
                    <log loggingLevel="INFO"
                         message="Processing all OPERATIONAL policies defined in loop ${exchangeProperty[loopObject].getName()}"/>
                    <split>
                        <simple>${exchangeProperty[loopObject].getOperationalPolicies()}
                        </simple>
                        <setProperty name="policy">
                            <simple>${body}</simple>
                        </setProperty>
                        <log loggingLevel="INFO"
                             message="Processing Operational Policy: ${exchangeProperty[policy].getName()}"/>
                        <setProperty name="raiseHttpExceptionFlag">
                            <simple resultType="java.lang.Boolean">false</simple>
                        </setProperty>

                        <to uri="direct:delete-policy-from-loop-object"/>
                        <to uri="direct:create-policy-from-loop-object"/>
                    </split>

                    <delay>
                        <constant>3000</constant>
                    </delay>

                    <to uri="direct:add-policies-from-loop-to-pdp-group"/>

                    <log loggingLevel="INFO"
                         message="SUBMIT request successfully executed for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('SUBMIT request successfully executed','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="SUBMIT request FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('SUBMIT request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>SUBMIT request FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>
        <put uri="/v2/loop/delete/{loopName}">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName"/>
                <doTry>
                    <log loggingLevel="INFO"
                         message="DELETE request for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*,'DELETE request')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('DELETE request','INFO',${exchangeProperty[loopObject]})"/>

                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">false</simple>
                    </setProperty>
                    <to uri="direct:undeploy-loop"/>

                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">false</simple>
                    </setProperty>
                    <to uri="direct:remove-all-policy-from-active-pdp-group"/>

                    <log loggingLevel="INFO"
                         message="Deleting all MICRO-SERVICES policies defined in loop ${exchangeProperty[loopObject].getName()}"/>
                    <split>
                        <simple>${exchangeProperty[loopObject].getMicroServicePolicies()}
                        </simple>
                        <setProperty name="policy">
                            <simple>${body}</simple>
                        </setProperty>
                        <log loggingLevel="INFO"
                             message="Deleting Micro Service Policy: ${exchangeProperty[policy].getName()}"/>
                        <setProperty name="raiseHttpExceptionFlag">
                            <simple resultType="java.lang.Boolean">false</simple>
                        </setProperty>
                        <to uri="direct:delete-policy-from-loop-object"/>
                    </split>
                    <log loggingLevel="INFO"
                         message="Deleting all OPERATIONAL policies defined in loop ${exchangeProperty[loopObject].getName()}"/>
                    <split>
                        <simple>${exchangeProperty[loopObject].getOperationalPolicies()}
                        </simple>
                        <setProperty name="policy">
                            <simple>${body}</simple>
                        </setProperty>
                        <log loggingLevel="INFO"
                             message="Deleting Operational Policy: ${exchangeProperty[policy].getName()}"/>
                        <setProperty name="raiseHttpExceptionFlag">
                            <simple resultType="java.lang.Boolean">false</simple>
                        </setProperty>
                        <to uri="direct:delete-policy-from-loop-object"/>
                    </split>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.LoopController?method=deleteLoop(${header.loopName})"/>
                    <log loggingLevel="INFO"
                         message="DELETE request successfully executed for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <setHeader name="CamelHttpResponseCode">
                        <constant>200</constant>
                    </setHeader>
                    <setBody>
                        <simple>DELETE request SUCCESSFUL</simple>
                    </setBody>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="DELETE request FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('DELETE request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>DELETE request FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>
        <get uri="/v2/loop/getstatus/{loopName}"
             outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName"/>
                <doTry>
                    <log loggingLevel="INFO"
                         message="GET STATUS request for loop: ${header.loopName}"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET STATUS request')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')"/>
                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('GET STATUS request','INFO',${exchangeProperty[loopObject]})"/>
                    <to uri="direct:update-policy-status-for-loop"/>
                    <to uri="direct:update-dcae-status-for-loop"/>
                    <to uri="direct:update-loop-state"/>

                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('GET STATUS request successfully executed','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET STATUS request FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('GET STATUS request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})"/>
                    </doCatch>
                    <doFinally>
                        <setBody>
                            <simple>${exchangeProperty[loopObject]}</simple>
                        </setBody>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>200</constant>
                        </setHeader>
                    </doFinally>
                </doTry>
            </route>
        </get>

        <put uri="/v2/loop/addOperationaPolicy/{loopName}/policyModel/{policyType}/{policyVersion}"
             outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName|policyType|policyVersion"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Add operational Policy')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:load-loop"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.LoopController?method=addOperationalPolicy(${header.loopName},${header.policyType},${header.policyVersion})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('ADD OperationalPolicy request successfully executed','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="ADD operational policy request FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('ADD OperationalPolicy request failed','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>ADD Operational policy request FAILED for loop: ${header.loopName},
                                ${exception.message}"
                            </simple>
                        </setBody>

                    </doCatch>
                </doTry>
            </route>
        </put>
        <put uri="/v2/loop/removeOperationaPolicy/{loopName}/policyModel/{policyType}/{policyVersion}/{policyName}"
             outType="org.onap.policy.clamp.loop.Loop" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="loopName|policyType|policyVersion|policyName"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'REMOVE operational Policy')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:load-loop"/>
                    <setProperty name="policyName">
                        <simple>${header.policyName}</simple>
                    </setProperty>
                    <setProperty name="policy">
                        <simple>${exchangeProperty[loopObject].getOperationalPolicy(header.policyName)}</simple>
                    </setProperty>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">false</simple>
                    </setProperty>
                    <to uri="direct:remove-one-policy-from-active-pdp-group"/>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">false</simple>
                    </setProperty>
                    <to uri="direct:delete-policy-from-loop-object"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.LoopController?method=removeOperationalPolicy(${header.loopName},${header.policyType},${header.policyVersion})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('REMOVE OperationalPolicy request successfully executed','INFO',${exchangeProperty[loopObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="REMOVE operational policy request FAILED for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('REMOVE OperationalPolicy request failed','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>REMOVE Operational policy request FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>
        <post
                uri="/v2/loop/create/{loopName}?templateName={templateName}"
                outType="org.onap.policy.clamp.loop.Loop" consumes="application/json"
                produces="application/json">
            <route>
                <removeHeaders
                        pattern="*"
                        excludePattern="loopName|templateName"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Create Loop')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.LoopController?method=createLoop(${header.loopName}, ${header.templateName})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="CREATE Loop from Template request failed for loop: ${header.loopName}, ${exception.stacktrace}"/>
                        <to
                                uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('CREATE Loop from template request failed','ERROR',${exchangeProperty[loopObject]})"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>CREATE Loop from template FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </post>
        <get uri="/v2/templates"
             outType="org.onap.policy.clamp.loop.template.LoopTemplate"
             produces="application/json">
            <route>
                <removeHeaders pattern="*"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Templates')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'template','','read')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.template.LoopTemplatesService?method=getAllLoopTemplates()"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET ALL templates request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET ALL templates FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>
        <get uri="/v2/templates/{templateName}"
             outType="org.onap.policy.clamp.loop.template.LoopTemplate"
             produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="templateName"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET a Template by NAME')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'template','','read')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.template.LoopTemplatesService?method=getLoopTemplate(${header.templateName})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Template request failed for template: ${header.templateName},  ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Template FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>
        <get uri="/v2/templates/names" outType="java.lang.String[]"
             produces="application/json">
            <route>
                <removeHeaders pattern="*"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Loop Template Names')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'template','','read')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.template.LoopTemplatesService?method=getLoopTemplateNames()"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET All Template names request failed for template:  ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET All Template names FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>

        <!-- NON LOOP related endpoints -->
        <get uri="/v2/dictionary"
             outType="org.onap.policy.clamp.tosca.Dictionary" produces="application/json">
            <route>
                <removeHeaders pattern="*"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Dictionaries')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.tosca.DictionaryService?method=getAllDictionaries()"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Dictionary request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Dictionary FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>

        <get uri="/v2/dictionary/secondary/names"
             outType="java.lang.String[]" produces="application/json">
            <route>
                <removeHeaders pattern="*"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Secondary Dictionary Level Names')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.tosca.DictionaryService?method=getAllSecondaryLevelDictionaryNames()"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Dictionary request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Dictionary FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>
        <get uri="/v2/dictionary/{dictionaryName}"
             outType="org.onap.policy.clamp.tosca.Dictionary" produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="dictionaryName"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Dictionary Elements for a Dictionary Name')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.tosca.DictionaryService?method=getDictionary(${header.dictionaryName})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Dictionary request failed for: ${header.dictionaryName}, ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Dictionary FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>
        <put uri="/v2/dictionary" type="org.onap.policy.clamp.tosca.Dictionary"
             outType="org.onap.policy.clamp.tosca.Dictionary" consumes="application/json"
             produces="application/json">
            <route>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Add New or Update Dictionary')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','update')"/>
                    <setProperty name="DictionaryObject">
                        <simple>${body}</simple>
                    </setProperty>
                    <to
                            uri="bean:org.onap.policy.clamp.tosca.DictionaryService?method=saveOrUpdateDictionary(${exchangeProperty[DictionaryObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="PUT Dictionary request failed for: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>PUT Dictionary FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>

        <put uri="/v2/dictionary/{name}"
             type="org.onap.policy.clamp.tosca.Dictionary"
             outType="org.onap.policy.clamp.tosca.Dictionary" consumes="application/json"
             produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="name"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Add New or Update Dictionary Element')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','update')"/>
                    <setProperty name="DictionaryObject">
                        <simple>${body}</simple>
                    </setProperty>
                    <to
                            uri="bean:org.onap.policy.clamp.tosca.DictionaryService?method=saveOrUpdateDictionaryElement(${header.name}, ${exchangeProperty[DictionaryObject]})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="PUT Dictionary request failed for: ${header.name}, ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>PUT Dictionary FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>

        <delete uri="/v2/dictionary/{name}" produces="application/json">
            <route>
                <removeHeaders pattern="*" excludePattern="name"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Delete Dictionary')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','update')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.tosca.DictionaryService?method=deleteDictionary(${header.name})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="DELETE Dictionary request failed for: ${header.name}, ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>DELETE Dictionary FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </delete>

        <delete uri="/v2/dictionary/{name}/elements/{shortName}"
                produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="name|shortName"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Delete Dictionary Element')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','update')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.tosca.DictionaryService?method=deleteDictionaryElement(${header.name}, ${header.shortName})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="DELETE Dictionary element request failed for: ${header.name}, ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>DELETE Dictionary element FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </delete>

        <get uri="/v2/policyToscaModels"
             outType="org.onap.policy.clamp.loop.template.PolicyModel"
             produces="application/json">
            <route>
                <removeHeaders pattern="*"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Tosca Policy Models')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.template.PolicyModelsService?method=getAllPolicyModels()"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Policy Models request failed for: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Policy models FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>
        <get uri="/v2/policyToscaModels/{policyModelType}/{policyModelVersion}"
             outType="com.google.gson.JsonObject" produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="policyModelType|policyModelVersion"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Tosca Policy Model by Name/Version')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.template.PolicyModelsService?method=getPolicyModelJson(${header.policyModelType},${header.policyModelVersion})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Policy Model request failed for type: ${header.policyModelType}, ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Policy model FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>
        <get uri="/v2/policyToscaModels/yaml/{policyModelType}/{policyModelVersion}"
             outType="java.lang.String" produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="policyModelType|policyModelVersion"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Tosca Policy Model Yaml String by Name/Version')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.template.PolicyModelsService?method=getPolicyModelTosca(${header.policyModelType},${header.policyModelVersion})"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Policy Model YAML request failed for type: ${header.policyModelType}, ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Policy model YAML FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>

        <!-- Policy Related endpoints, not related to LOOP  -->
        <get uri="/v2/policies" outType="com.google.gson.JsonObject" produces="application/json">
            <route>
                <removeHeaders pattern="*"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Policies List ')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'policies','','read')"/>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <to uri="direct:get-all-policies"/>
                    <setProperty name="policiesListResponse">
                        <simple>${body}</simple>
                    </setProperty>
                    <to uri="direct:get-all-pdp-groups"/>
                    <setProperty name="pdpGroupInfoResponse">
                        <simple>${body}</simple>
                    </setProperty>
                    <setBody>
                        <method ref="org.onap.policy.clamp.policy.pdpgroup.PoliciesPdpMerger"
                                method="mergePoliciesAndPdpGroupStates(${exchangeProperty[policiesListResponse]},${exchangeProperty[pdpGroupInfoResponse]})"/>
                    </setBody>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Policies list JSON request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Policies list JSON FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>

        <!-- Create a new policy -->
        <post uri="/v2/policies/{policyModelType}/{policyModelVersion}/{policyName}/{policyVersion}"
              type="com.google.gson.JsonElement"
              consumes="application/json"
              outType="com.google.gson.JsonObject"
              produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="policyModelType|policyModelVersion|policyName|policyVersion"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'CREATE a new Policy ')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'policies','','update')"/>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <setProperty name="policyModelType">
                        <simple>${header.policyModelType}</simple>
                    </setProperty>
                    <setProperty name="policyModelVersion">
                        <simple>${header.policyModelVersion}</simple>
                    </setProperty>
                    <setProperty name="policyProperties">
                        <simple>${body}</simple>
                    </setProperty>
                    <to
                            uri="bean:org.onap.policy.clamp.loop.template.PolicyModelsService?method=getPolicyModelTosca(${header.policyModelType},${header.policyModelVersion})"/>
                    <setBody>
                        <method ref="org.onap.policy.clamp.policy.PolicyPayload"
                                method="createPolicyPayload(${header.policyModelType}, ${header.policyModelVersion},
                                    ${header.policyName}, ${header.policyVersion}, ${exchangeProperty[policyProperties]}, ${body})"/>
                    </setBody>
                    <to uri="direct:create-policy"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="CREATE Policy request failed for type: ${header.policyModelType}/${header.policyModelVersion}, ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>CREATE Policy FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </post>

        <delete uri="/v2/policies/{policyModelType}/{policyModelVersion}/{policyName}/{policyVersion}">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="policyModelType|policyModelVersion|policyName|policyVersion"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'DELETE a Policy ')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'policies','','update')"/>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <setProperty name="policyModelType">
                        <simple>${header.policyModelType}</simple>
                    </setProperty>
                    <setProperty name="policyModelVersion">
                        <simple>${header.policyModelVersion}</simple>
                    </setProperty>
                    <setProperty name="policyName">
                        <simple>${header.policyName}</simple>
                    </setProperty>
                    <setProperty name="policyVersion">
                        <simple>${header.policyVersion}</simple>
                    </setProperty>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">false</simple>
                    </setProperty>
                    <to uri="direct:undeploy-one-policy-from-pap"/>
                    <to uri="direct:delete-policy"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="DELETE Policy request failed for policy: ${header.policyName}/${header.policyVersion}, ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>DELETE Policy FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </delete>

        <put uri="/v2/policies/pdpDeployment" type="com.google.gson.JsonElement" consumes="application/json">
            <route>
                <removeHeaders pattern="*"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Pdp group deployment update')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'policies','','update')"/>
                    <setBody>
                        <method ref="org.onap.policy.clamp.policy.pdpgroup.PdpGroupPayload"
                                method="generatePdpGroupPayloadFromList(${body})"/>
                    </setBody>
                    <log loggingLevel="INFO"
                         message="PDP Group DEPLOY request payload: ${body}"/>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <to uri="direct:add-multiple-policies-to-pdp-group"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="PDP Group deployment request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>PDP Group deployment request FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>

        <post uri="/v2/policies/policytype" type="java.lang.String" consumes="plain/text">
            <route>
                <removeHeaders pattern="*"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Create policy type')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'policies','','update')"/>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <to uri="direct:create-policy-type"/>
                    <to
                            uri="bean:org.onap.policy.clamp.policy.downloader.PolicyEngineController?method=synchronizeAllPolicies()"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="Create policy type request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>Create policy type request FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </post>

        <get uri="/v2/toscaControlLoop/getToscaTemplate" outType="java.lang.String" bindingMode="off"
             produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="name|version"/>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Tosca Service Template ')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')"/>
                    <setHeader name="Content-Type">
                        <constant>application/json</constant>
                    </setHeader>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">false</simple>
                    </setProperty>
                    <to uri="direct:get-service-template"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Tosca Service Template JSON request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Tosca Service Template JSON FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>

        <post uri="/v2/toscaControlLoop/commissionToscaTemplate"
              type="java.lang.String"
              consumes="plain/text"
              outType="java.lang.String"
              produces="application/json"
              bindingMode="off">
            <route>
                <removeHeaders pattern="*"/>
                <setProperty name="raiseHttpExceptionFlag">
                    <simple resultType="java.lang.Boolean">false</simple>
                </setProperty>
                <setHeader name="Content-Type">
                    <constant>application/json</constant>
                </setHeader>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Update the global properties')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:commission-service-template"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="Commissioning of Tosca Service Template FAILED"/>

                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>Commissioning Tosca Service Template FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </post>

        <delete uri="/v2/toscaControlLoop/decommissionToscaTemplate"
              type="java.lang.String"
              consumes="plain/text"
              outType="java.lang.String"
              produces="application/json"
              bindingMode="off">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="name|version|requestId"/>
                <setProperty name="raiseHttpExceptionFlag">
                    <simple resultType="java.lang.Boolean">false</simple>
                </setProperty>
                <setHeader name="Content-Type">
                    <constant>application/json</constant>
                </setHeader>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Delete Tosca Service Template')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:decommission-service-template"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="Decommissioning of Tosca Service Template FAILED"/>

                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>Decommissioning Tosca Service Template FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </delete>

        <delete uri="/v2/toscaControlLoop/deleteToscaInstantiation"
                type="java.lang.String"
                consumes="plain/text"
                outType="java.lang.String"
                produces="application/json"
                bindingMode="off">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="name|version|requestId"/>
                <setProperty name="raiseHttpExceptionFlag">
                    <simple resultType="java.lang.Boolean">false</simple>
                </setProperty>
                <setHeader name="Content-Type">
                    <constant>application/json</constant>
                </setHeader>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Delete Tosca Service Template')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:delete-tosca-instantiation"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="Deleting Tosca Instantiation FAILED"/>

                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>Deleting Tosca Instantiation FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </delete>

        <get uri="/v2/toscaControlLoop/getToscaInstantiation" outType="java.lang.String" bindingMode="off" produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="name|version|requestId"/>
                <doTry>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Tosca Instantiation ')"/>
                    <to uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')"/>
                    <setHeader name="Content-Type">
                        <constant>application/json</constant>
                    </setHeader>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <to uri="direct:get-tosca-instantiation"/>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Tosca Instantiation JSON request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Tosca Instantiation JSON FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>
        <get uri="/v2/toscaControlLoop/getInstantiationOrderState" outType="java.lang.String" bindingMode="off" produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="name|version|requestId"/>
                <doTry>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Tosca Instantiation ')"/>
                    <to uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')"/>
                    <setHeader name="Content-Type">
                        <constant>application/json</constant>
                    </setHeader>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <to uri="direct:get-tosca-instantiation-order-state"/>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Tosca Instantiation Order State JSON request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Tosca Instantiation Order State JSON FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>
        <get uri="/v2/toscaControlLoop/getJsonSchema" outType="java.lang.String" bindingMode="off" produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="section"/>
                <doTry>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Json Schema ')"/>
                    <to uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')"/>
                    <setHeader name="Content-Type">
                        <constant>application/json</constant>
                    </setHeader>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <to uri="direct:get-json-schema"/>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET JSON Schema request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET JSON Schema FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>

        <get uri="/v2/toscaControlLoop/getElementDefinitions" outType="java.lang.String" bindingMode="off" produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="name|version|requestId"/>
                <doTry>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Json Schema ')"/>
                    <to uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')"/>
                    <setHeader name="Content-Type">
                        <constant>application/json</constant>
                    </setHeader>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <to uri="direct:get-element-definitions"/>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Element Definitions request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET JSON Schema FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>

        <get uri="/v2/toscaControlLoop/getControlLoopDefinitions" outType="java.lang.String" bindingMode="off" produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="name|version|requestId"/>
                <doTry>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Json Schema ')"/>
                    <to uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')"/>
                    <setHeader name="Content-Type">
                        <constant>application/json</constant>
                    </setHeader>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">true</simple>
                    </setProperty>
                    <to uri="direct:get-control-loop-definitions"/>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Control Loop Definitions request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Control Loop Definitions FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>

        <post uri="/v2/toscaControlLoop/postToscaInstanceProperties"
              type="java.lang.String"
              consumes="plain/text"
              outType="java.lang.String"
              produces="application/json"
              bindingMode="off">
            <route>
                <removeHeaders pattern="*"/>
                <setProperty name="raiseHttpExceptionFlag">
                    <simple resultType="java.lang.Boolean">false</simple>
                </setProperty>
                <setHeader name="Content-Type">
                    <constant>application/json</constant>
                </setHeader>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Update the global properties')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:post-tosca-instance-properties"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="Creating Instance Properties FAILED"/>

                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>Creating Instance Properties FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </post>
        <delete uri="/v2/toscaControlLoop/deleteToscaInstanceProperties"
                type="java.lang.String"
                consumes="plain/text"
                outType="java.lang.String"
                produces="application/json"
                bindingMode="off">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="name|version|requestId"/>
                <setProperty name="raiseHttpExceptionFlag">
                    <simple resultType="java.lang.Boolean">false</simple>
                </setProperty>
                <setHeader name="Content-Type">
                    <constant>application/json</constant>
                </setHeader>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Delete Tosca Service Template')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:delete-tosca-instance-properties"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="Deleting Tosca Instance Properties FAILED"/>

                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>Deleting Tosca Instance Properties FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </delete>

        <get uri="/v2/toscaControlLoop/getCommonOrInstanceProperties" outType="java.lang.String" bindingMode="off" produces="application/json">
            <route>
                <removeHeaders pattern="*"
                               excludePattern="name|version|requestId|common"/>
                <doTry>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Common Properties ')"/>
                    <to uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')"/>
                    <setHeader name="Content-Type">
                        <constant>application/json</constant>
                    </setHeader>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">false</simple>
                    </setProperty>
                    <to uri="direct:get-common-or-instance-properties"/>
                    <to uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="GET Common Or Instance Properties request failed: ${exception.stacktrace}"/>
                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>GET Common Properties FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </get>

        <post uri="/v2/toscaControlLoop/postToscaInstantiation"
              type="java.lang.String"
              consumes="plain/text"
              outType="java.lang.String"
              produces="application/json"
              bindingMode="off">
            <route>
                <removeHeaders pattern="*"/>
                <setProperty name="raiseHttpExceptionFlag">
                    <simple resultType="java.lang.Boolean">true</simple>
                </setProperty>
                <setHeader name="Content-Type">
                    <constant>application/json</constant>
                </setHeader>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Update the global properties')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:post-tosca-instantiation"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="Create Tosca Instantiation Service FAILED"/>

                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>Create Tosca Instantiation Service FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </post>

        <put uri="/v2/toscaControlLoop/putToscaInstantiationStateChange"
              type="java.lang.String"
              consumes="plain/text"
              outType="java.lang.String"
              produces="application/json"
              bindingMode="off">
            <route>
                <removeHeaders pattern="*"/>
                <setProperty name="raiseHttpExceptionFlag">
                    <simple resultType="java.lang.Boolean">true</simple>
                </setProperty>
                <setHeader name="Content-Type">
                    <constant>application/json</constant>
                </setHeader>
                <doTry>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Update the global properties')"/>
                    <to
                            uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')"/>
                    <to uri="direct:put-tosca-instantiation"/>
                    <to
                            uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=endLog()"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <handled>
                            <constant>true</constant>
                        </handled>
                        <to
                                uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=errorLog()"/>
                        <log loggingLevel="ERROR"
                             message="Tosca Instantiation State Change Service FAILED"/>

                        <setHeader name="CamelHttpResponseCode">
                            <constant>500</constant>
                        </setHeader>
                        <setBody>
                            <simple>Tosca Instantiation State Change Service FAILED</simple>
                        </setBody>
                    </doCatch>
                </doTry>
            </route>
        </put>

        <get uri="/v2/clampInformation" outType="org.onap.policy.clamp.clds.model.ClampInformation"
             produces="application/json">
            <route>
                <to
                        uri="bean:org.onap.policy.clamp.authorization.AuthorizationController?method=getClampInformation()"/>
            </route>
        </get>
    </rest>
</rests>
