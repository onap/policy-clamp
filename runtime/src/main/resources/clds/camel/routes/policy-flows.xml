<routes xmlns="http://camel.apache.org/schema/spring">

    <!-- Camel routes not related to Loop context -->
    <route id="get-all-policy-models">
        <from uri="direct:get-all-policy-models"/>
        <doTry>
            <log loggingLevel="INFO" message="Getting all the policy models"/>
            <to
                    uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Getting all the policy models')"/>
            <setHeader name="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>
            <setHeader name="X-ONAP-RequestID">
                <simple>${exchangeProperty[X-ONAP-RequestID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-InvocationID">
                <simple>${exchangeProperty[X-ONAP-InvocationID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-PartnerName">
                <simple>${exchangeProperty[X-ONAP-PartnerName]}
                </simple>
            </setHeader>
            <log loggingLevel="INFO"
                 message="Endpoint to get all policy models: {{clamp.config.policy.api.url}}/policy/api/v1/policytypes"></log>
            <toD
                    uri="{{clamp.config.policy.api.url}}/policy/api/v1/policytypes?bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;authenticationPreemptive=true&amp;connectionClose=true"/>
            <convertBodyTo type="java.lang.String"/>
            <doFinally>
                <to uri="direct:reset-raise-http-exception-flag"/>
                <to
                        uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()"/>
            </doFinally>
        </doTry>
    </route>

    <route id="get-policy-tosca-model">
        <from uri="direct:get-policy-tosca-model"/>
        <doTry>
            <log loggingLevel="INFO"
                 message="Getting the policy tosca model: ${exchangeProperty[policyModelType]}/${exchangeProperty[policyModelVersion]}"/>
            <to
                    uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Getting the policy model')"/>
            <setHeader name="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>
            <setHeader name="X-ONAP-RequestID">
                <simple>${exchangeProperty[X-ONAP-RequestID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-InvocationID">
                <simple>${exchangeProperty[X-ONAP-InvocationID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-PartnerName">
                <simple>${exchangeProperty[X-ONAP-PartnerName]}
                </simple>
            </setHeader>
            <log loggingLevel="INFO"
                 message="Endpoint to get policy model: {{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policyModelType]}/versions/${exchangeProperty[policyModelVersion]}"></log>
            <toD
                    uri="{{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policyModelType]}/versions/${exchangeProperty[policyModelVersion]}?bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;authenticationPreemptive=true&amp;connectionClose=true"/>
            <convertBodyTo type="java.lang.String"/>
            <doFinally>
                <to uri="direct:reset-raise-http-exception-flag"/>
                <to
                        uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()"/>
            </doFinally>
        </doTry>
    </route>

    <route id="get-all-pdp-groups">
        <from uri="direct:get-all-pdp-groups"/>
        <doTry>
            <log loggingLevel="INFO"
                 message="Getting the list of PDP Groups"/>
            <to
                    uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Getting the PDP Group list')"/>
            <setHeader name="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>
            <setHeader name="X-ONAP-RequestID">
                <simple>${exchangeProperty[X-ONAP-RequestID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-InvocationID">
                <simple>${exchangeProperty[X-ONAP-InvocationID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-PartnerName">
                <simple>${exchangeProperty[X-ONAP-PartnerName]}
                </simple>
            </setHeader>
            <log loggingLevel="INFO"
                 message="Endpoint to get policy model: {{clamp.config.policy.pap.url}}/policy/pap/v1/pdps"></log>
            <toD
                    uri="{{clamp.config.policy.pap.url}}/policy/pap/v1/pdps?bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.policy.pap.userName}}&amp;authPassword={{clamp.config.policy.pap.password}}&amp;authenticationPreemptive=true&amp;connectionClose=true"/>
            <convertBodyTo type="java.lang.String"/>
            <doFinally>
                <to uri="direct:reset-raise-http-exception-flag"/>
                <to
                        uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()"/>
            </doFinally>
        </doTry>
    </route>

    <route id="get-all-policies">
        <from uri="direct:get-all-policies"/>
        <doTry>
            <log loggingLevel="INFO"
                 message="Getting the policies list"/>
            <to
                    uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Getting the policies list')"/>
            <setHeader name="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>
            <setHeader name="X-ONAP-RequestID">
                <simple>${exchangeProperty[X-ONAP-RequestID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-InvocationID">
                <simple>${exchangeProperty[X-ONAP-InvocationID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-PartnerName">
                <simple>${exchangeProperty[X-ONAP-PartnerName]}
                </simple>
            </setHeader>
            <log loggingLevel="INFO"
                 message="Endpoint to get policies list: {{clamp.config.policy.api.url}}/policy/api/v1/policies"></log>
            <toD
                    uri="{{clamp.config.policy.api.url}}/policy/api/v1/policies?bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;authenticationPreemptive=true&amp;connectionClose=true"/>
            <convertBodyTo type="java.lang.String"/>
            <doFinally>
                <to uri="direct:reset-raise-http-exception-flag"/>
                <to
                        uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()"/>
            </doFinally>
        </doTry>
    </route>
    <route id="add-multiple-policies-to-pdp-group">
        <from uri="direct:add-multiple-policies-to-pdp-group"/>
        <!-- Body should come from outside, expect a json describing the policy -->
        <doTry>
            <log loggingLevel="INFO"
                 message="Add policies to PDP group"/>
            <to
                    uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Add policies to PDP group')"/>
            <setHeader name="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <setHeader name="Content-Type">
                <constant>application/json</constant>
            </setHeader>
            <setHeader name="X-ONAP-RequestID">
                <simple>${exchangeProperty[X-ONAP-RequestID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-InvocationID">
                <simple>${exchangeProperty[X-ONAP-InvocationID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-PartnerName">
                <simple>${exchangeProperty[X-ONAP-PartnerName]}
                </simple>
            </setHeader>
            <log loggingLevel="INFO"
                 message="Endpoint to add/remove policies in batch to PDP Group: {{clamp.config.policy.pap.url}}/policy/pap/v1/pdps/deployments/batch"></log>
            <toD
                    uri="{{clamp.config.policy.pap.url}}/policy/pap/v1/pdps/deployments/batch?bridgeEndpoint=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;useSystemProperties=true&amp;authUsername={{clamp.config.policy.pap.userName}}&amp;authPassword={{clamp.config.policy.pap.password}}&amp;authenticationPreemptive=true&amp;connectionClose=true"/>
            <doFinally>
                <to uri="direct:reset-raise-http-exception-flag"/>
                <to
                        uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()"/>
            </doFinally>
        </doTry>
    </route>
    <route id="undeploy-one-policy-from-pap">
        <from uri="direct:undeploy-one-policy-from-pap"/>
        <doTry>
            <log loggingLevel="INFO"
                 message="Undeploy POLICY from PAP: ${exchangeProperty[policyName]}/${exchangeProperty[policyVersion]}"/>
            <to
                    uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Undeploy POLICY from PAP')"/>
            <setBody>
                <constant>null</constant>
            </setBody>
            <setHeader name="CamelHttpMethod">
                <constant>DELETE</constant>
            </setHeader>
            <setHeader name="X-ONAP-RequestID">
                <simple>${exchangeProperty[X-ONAP-RequestID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-InvocationID">
                <simple>${exchangeProperty[X-ONAP-InvocationID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-PartnerName">
                <simple>${exchangeProperty[X-ONAP-PartnerName]}
                </simple>
            </setHeader>
            <log loggingLevel="INFO"
                 message="Endpoint to delete policy from PDP Group: {{clamp.config.policy.pap.url}}/pdps/policies/${exchangeProperty[policyName]}/versions/${exchangeProperty[policyVersion]}"></log>
            <toD
                    uri="{{clamp.config.policy.pap.url}}/policy/pap/v1/pdps/policies/${exchangeProperty[policyName]}/versions/${exchangeProperty[policyVersion]}?bridgeEndpoint=true&amp;useSystemProperties=true&amp;mapHttpMessageHeaders=false&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authUsername={{clamp.config.policy.pap.userName}}&amp;authPassword={{clamp.config.policy.pap.password}}&amp;authenticationPreemptive=true&amp;connectionClose=true"/>
            <doFinally>
                <to uri="direct:reset-raise-http-exception-flag"/>
                <to
                        uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()"/>
            </doFinally>
        </doTry>
    </route>

    <route id="create-policy">
        <!-- Body should come from outside, expect a json describing the policy -->
        <from uri="direct:create-policy"/>
        <doTry>
            <log loggingLevel="INFO"
                 message="Create Policy from model ${exchangeProperty[policyModelType]}/${exchangeProperty[policyModelVersion]}"/>
            <to
                    uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Create Policy')"/>
            <setHeader name="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <setHeader name="Content-Type">
                <constant>application/json</constant>
            </setHeader>
            <setHeader name="X-ONAP-RequestID">
                <simple>${exchangeProperty[X-ONAP-RequestID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-InvocationID">
                <simple>${exchangeProperty[X-ONAP-InvocationID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-PartnerName">
                <simple>${exchangeProperty[X-ONAP-PartnerName]}
                </simple>
            </setHeader>
            <log loggingLevel="INFO"
                 message="Endpoint to create policy: {{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policyModelType]}/versions/${exchangeProperty[policyModelVersion]}/policies"></log>
            <toD
                    uri="{{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policyModelType]}/versions/${exchangeProperty[policyModelVersion]}/policies?bridgeEndpoint=true&amp;useSystemProperties=true&amp;mapHttpMessageHeaders=false&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;authenticationPreemptive=true&amp;connectionClose=true"/>
            <doFinally>
                <to uri="direct:reset-raise-http-exception-flag"/>
                <to
                        uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()"/>
            </doFinally>
        </doTry>
    </route>
    <route id="delete-policy">
        <from uri="direct:delete-policy"/>
        <doTry>
            <log loggingLevel="INFO"
                 message="Deleting Policy: ${exchangeProperty[policyName]}"/>
            <to
                    uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Delete Policy')"/>
            <setBody>
                <constant>null</constant>
            </setBody>
            <setHeader name="CamelHttpMethod">
                <constant>DELETE</constant>
            </setHeader>
            <setHeader name="X-ONAP-RequestID">
                <simple>${exchangeProperty[X-ONAP-RequestID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-InvocationID">
                <simple>${exchangeProperty[X-ONAP-InvocationID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-PartnerName">
                <simple>${exchangeProperty[X-ONAP-PartnerName]}
                </simple>
            </setHeader>
            <log loggingLevel="INFO"
                 message="Endpoint to delete policy: {{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policyModelType]}/versions/${exchangeProperty[policyModelVersion]}/policies/${exchangeProperty[policyName]}/versions/${exchangeProperty[policyVersion]}"></log>
            <toD
                    uri="{{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policyModelType]}/versions/${exchangeProperty[policyModelVersion]}/policies/${exchangeProperty[policyName]}/versions/${exchangeProperty[policyVersion]}?bridgeEndpoint=true&amp;useSystemProperties=true&amp;mapHttpMessageHeaders=false&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;deleteWithBody=false&amp;mapHttpMessageBody=false&amp;mapHttpMessageFormUrlEncodedBody=false&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;authenticationPreemptive=true&amp;connectionClose=true"/>

            <doFinally>
                <to uri="direct:reset-raise-http-exception-flag"/>
                <to
                        uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()"/>
            </doFinally>
        </doTry>
    </route>
    <route id="create-policy-type">
        <from uri="direct:create-policy-type"/>
        <doTry>
            <log loggingLevel="INFO"
                 message="Creating Policy type"/>
            <to
                    uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Create policy typ')"/>
             <setHeader name="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <setHeader name="Content-Type">
                <constant>application/yaml</constant>
            </setHeader>
            <setHeader name="X-ONAP-RequestID">
                <simple>${exchangeProperty[X-ONAP-RequestID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-InvocationID">
                <simple>${exchangeProperty[X-ONAP-InvocationID]}
                </simple>
            </setHeader>
            <setHeader name="X-ONAP-PartnerName">
                <simple>${exchangeProperty[X-ONAP-PartnerName]}
                </simple>
            </setHeader>
            <log loggingLevel="INFO"
                 message="Endpoint to create policy type: {{clamp.config.policy.api.url}}/policy/api/v1/policytypes"></log>
            <toD
                    uri="{{clamp.config.policy.api.url}}/policy/api/v1/policytypes?bridgeEndpoint=true&amp;useSystemProperties=true&amp;mapHttpMessageHeaders=false&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;authenticationPreemptive=true&amp;connectionClose=true"/>

            <doFinally>
                <to uri="direct:reset-raise-http-exception-flag"/>
                <to
                        uri="bean:org.onap.policy.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()"/>
            </doFinally>
        </doTry>
    </route>
</routes>