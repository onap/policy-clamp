<routes xmlns="http://camel.apache.org/schema/spring">
    <route id="load-loop">
        <from uri="direct:load-loop" />
        <setBody>
            <simple>${header.loopName}</simple>
        </setBody>
        <setProperty name="loopObject">
            <method ref="org.onap.policy.clamp.loop.LoopService" method="getLoop" />
        </setProperty>

        <when>
            <simple>${exchangeProperty[loopObject]} == null</simple>
            <setHeader name="CamelHttpResponseCode">
                <constant>404</constant>
            </setHeader>
            <log loggingLevel="WARN" message="Loop not found in database: ${body}" />
            <stop />
        </when>
    </route>
    <route id="update-policy-status-for-loop">
        <from uri="direct:update-policy-status-for-loop" />
        <setProperty name="policyComponent">
            <simple>${exchangeProperty[loopObject].getComponent('POLICY')}
            </simple>
        </setProperty>
        <setProperty name="policyFound">
            <simple resultType="java.lang.Boolean">true</simple>
        </setProperty>
        <setProperty name="policyDeployed">
            <simple resultType="java.lang.Boolean">true</simple>
        </setProperty>
        <log loggingLevel="INFO"
            message="Processing all MICRO-SERVICES policies defined in loop ${exchangeProperty[loopObject].getName()}" />
        <split>
            <simple>${exchangeProperty[loopObject].getMicroServicePolicies()}
            </simple>
            <setProperty name="policyName">
                <simple>${body.getName()}</simple>
            </setProperty>
            <setProperty name="policyType">
                <simple>${body.getPolicyModel().getPolicyModelType()}</simple>
            </setProperty>
            <setProperty name="policyTypeVersion">
                <simple>${body.getPolicyModel().getVersion()}</simple>
            </setProperty>
            <setProperty name="policyPdpGroup">
                <simple>${body.getPdpGroup()}</simple>
            </setProperty>
            <setProperty name="policyVersion">
                <simple>1.0.0</simple>
            </setProperty>
            <setBody>
                <constant>null</constant>
            </setBody>
            <log loggingLevel="INFO"
                message="Processing Micro Service Policy: ${exchangeProperty[policyName]} of type ${exchangeProperty[policyType]}" />
            <to uri="direct:verify-one-policy" />
        </split>
        <log loggingLevel="INFO"
            message="Processing all OPERATIONAL policies defined in loop ${exchangeProperty[loopObject].getName()}" />
        <split>
            <simple>${exchangeProperty[loopObject].getOperationalPolicies()}
            </simple>
            <setProperty name="policyName">
                <simple>${body.getName()}</simple>
            </setProperty>
            <setProperty name="policyType">
                <simple>${body.getPolicyModel().getPolicyModelType()}</simple>
            </setProperty>
            <setProperty name="policyTypeVersion">
                <simple>${body.getPolicyModel().getVersion()}</simple>
            </setProperty>
             <setProperty name="policyVersion">
                <simple>1.0.0</simple>
            </setProperty>
            <setProperty name="policyPdpGroup">
                <simple>${body.getPdpGroup()}</simple>
            </setProperty>
            <setBody>
                <constant>null</constant>
            </setBody>
            <log loggingLevel="INFO"
                message="Processing Operational Policy: ${exchangeProperty[policyName]} of type ${exchangeProperty[policyType]}" />
            <to uri="direct:verify-one-policy" />
        </split>
        <setProperty name="policyState">
            <simple> ${exchangeProperty[policyComponent].getState()}
            </simple>
        </setProperty>
        <log loggingLevel="INFO"
            message="Policy state set to: ${exchangeProperty[policyState].getStateName()}" />
        <to
            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLogForComponent('Policy state set to: ${exchangeProperty[policyState].getStateName()}','INFO','POLICY',${exchangeProperty[loopObject]})" />
    </route>
    <route id="update-dcae-status-for-loop">
        <from uri="direct:update-dcae-status-for-loop" />
        <log loggingLevel="INFO"
            message="Updating DCAE status for loop: ${exchangeProperty[loopObject].getName()}" />
        <choice>
            <when>
                <simple>${exchangeProperty['loopObject'].getLoopTemplate().getUniqueBlueprint()} == true
                </simple>
                    <setProperty name="dcaeComponent">
                        <simple>${exchangeProperty[loopObject].getComponent('DCAE')}</simple>
                    </setProperty>
                <when>
                    <simple>${exchangeProperty[loopObject].getDcaeDeploymentStatusUrl()} != null
                    </simple>
                    <setProperty name="getStatusUrl">
                        <simple>${exchangeProperty[loopObject].getDcaeDeploymentStatusUrl()}</simple>
                    </setProperty>
                    <setProperty name="raiseHttpExceptionFlag">
                        <simple resultType="java.lang.Boolean">false</simple>
                    </setProperty>
                    <to uri="direct:get-dcae-deployment-status" />
                    <when>
                        <simple> ${header.CamelHttpResponseCode} == 200 </simple>
                        <convertBodyTo type="java.lang.String" />
                        <setProperty name="dcaeResponse">
                            <method ref="org.onap.policy.clamp.loop.components.external.DcaeComponent"
                                method="convertDcaeResponse(${body})" />
                        </setProperty>
                    </when>
                </when>
                <setProperty name="dcaeState">
                    <simple> ${exchangeProperty[dcaeComponent].computeState(*)}
                    </simple>
                </setProperty>
                <log loggingLevel="INFO"
                    message="DCAE state set to: ${exchangeProperty[dcaeState].getStateName()} - DCAE message: ${exchangeProperty[dcaeResponse].getError()}" />
                <to
                    uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLogForComponent('DCAE state set to: ${exchangeProperty[dcaeState].getStateName()} - message: ${exchangeProperty[dcaeResponse].getError()}','INFO','DCAE',${exchangeProperty[loopObject]})" />
            </when>
            <when>
                <simple>${exchangeProperty['loopObject'].getLoopTemplate().getUniqueBlueprint()} == false
                </simple>
                <split>
                    <simple>${exchangeProperty[loopObject].getMicroServicePolicies()}
                    </simple>
                    <setProperty name="microServicePolicy">
                        <simple>${body}</simple>
                    </setProperty>
                    <setProperty name="dcaeComponent">
                        <simple>${exchangeProperty[loopObject].getComponent('DCAE_' + ${exchangeProperty[microServicePolicy].getName()})}</simple>
                    </setProperty>
                    <when>
                        <simple>${exchangeProperty[microServicePolicy].getDcaeDeploymentStatusUrl()} != null
                        </simple>
                        <setProperty name="getStatusUrl">
                            <simple>${exchangeProperty[microServicePolicy].getDcaeDeploymentStatusUrl()}</simple>
                        </setProperty>
                        <setProperty name="raiseHttpExceptionFlag">
                            <simple resultType="java.lang.Boolean">false</simple>
                        </setProperty>
                        <to uri="direct:get-dcae-deployment-status" />
                        <when>
                            <simple> ${header.CamelHttpResponseCode} == 200 </simple>
                            <convertBodyTo type="java.lang.String" />
                            <setProperty name="dcaeResponse">
                                <method ref="org.onap.policy.clamp.loop.components.external.DcaeComponent"
                                    method="convertDcaeResponse(${body})" />
                            </setProperty>
                        </when>
                    </when>
                    <setProperty name="dcaeState">
                        <simple> ${exchangeProperty[dcaeComponent].computeState(*)}
                        </simple>
                    </setProperty>
                    <log loggingLevel="INFO"
                        message="DCAE state set to: ${exchangeProperty[dcaeState].getStateName()} - DCAE message: ${exchangeProperty[dcaeResponse].getError()}" />
                    <to
                        uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLogForComponent('DCAE state set to: ${exchangeProperty[dcaeState].getStateName()} - message: ${exchangeProperty[dcaeResponse].getError()}','INFO','DCAE',${exchangeProperty[microServicePolicy]})" />
                </split>>
            </when>
        </choice>
        </route>
    <route id="direct:update-loop-state">
        <from uri="direct:update-loop-state" />
        <log loggingLevel="INFO"
            message="Updating status for loop: ${exchangeProperty[loopObject].getName()}" />
        <choice>
            <when>
                <simple>${exchangeProperty['dcaeState'].getStateName()} ==
                    'BLUEPRINT_DEPLOYED' &amp;&amp; ${exchangeProperty['policyState'].getStateName()}
                    == 'NOT_SENT'
                </simple>
                <to
                    uri="bean:org.onap.policy.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'DESIGN')" />
            </when>
            <when>
                <simple>${exchangeProperty['dcaeState'].getStateName()} == 'IN_ERROR' ||
                    ${exchangeProperty['dcaeState'].getStateName()} ==
                    'MICROSERVICE_INSTALLATION_FAILED'
                </simple>
                <to
                    uri="bean:org.onap.policy.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'IN_ERROR')" />
            </when>
            <when>
                <simple>${exchangeProperty['dcaeState'].getStateName()} ==
                    'MICROSERVICE_UNINSTALLATION_FAILED' ||
                    ${exchangeProperty['policyState'].getStateName()} == 'IN_ERROR'
                </simple>
                <to
                    uri="bean:org.onap.policy.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'IN_ERROR')" />
            </when>
            <when>
                <simple>${exchangeProperty['dcaeState'].getStateName()} ==
                    'MICROSERVICE_INSTALLED_SUCCESSFULLY' &amp;&amp;
                    ${exchangeProperty['policyState'].getStateName()} == 'SENT_AND_DEPLOYED'
                </simple>
                <to
                    uri="bean:org.onap.policy.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'RUNNING')" />
            </when>
            <when>
                <simple>${exchangeProperty['dcaeState'].getStateName()} ==
                    'MICROSERVICE_INSTALLED_SUCCESSFULLY' &amp;&amp;
                    ${exchangeProperty['policyState'].getStateName()} == 'SENT'
                </simple>
                <to
                    uri="bean:org.onap.policy.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'STOPPED')" />
            </when>
            <when>
                <simple>${exchangeProperty['dcaeState'].getStateName()} ==
                    'BLUEPRINT_DEPLOYED' || ${exchangeProperty['dcaeState'].getStateName()} ==
                    'MICROSERVICE_UNINSTALLED_SUCCESSFULLY' &amp;&amp;
                    ${exchangeProperty['policyState'].getStateName()} == 'SENT_AND_DEPLOYED'
                </simple>
                <to
                    uri="bean:org.onap.policy.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'SUBMITTED')" />
            </when>
            <when>
                <simple>${exchangeProperty['dcaeState'].getStateName()} ==
                    'PROCESSING_MICROSERVICE_INSTALLATION' ||
                    ${exchangeProperty['dcaeState'].getStateName()} ==
                    'PROCESSING_MICROSERVICE_UNINSTALLATION' &amp;&amp;
                    ${exchangeProperty['policyState'].getStateName()} == 'SENT_AND_DEPLOYED'
                </simple>
                <to
                    uri="bean:org.onap.policy.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'WAITING')" />
            </when>
            <when>
                <simple>${exchangeProperty['dcaeState'].getStateName()} ==
                    'MICROSERVICE_INSTALLED_SUCCESSFULLY' &amp;&amp;
                    ${exchangeProperty['policyState'].getStateName()} != 'NOT_SENT'
                </simple>
                <to
                    uri="bean:org.onap.policy.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'DEPLOYED')" />
            </when>
        </choice>
        <log loggingLevel="INFO"
            message="New loop state is: ${exchangeProperty[loopObject].getLastComputedState().toString()}" />
        <to
            uri="bean:org.onap.policy.clamp.loop.log.LoopLogService?method=addLog('New loop state is: ${exchangeProperty[loopObject].getLastComputedState().toString()}','INFO',${exchangeProperty[loopObject]})" />

    </route>
</routes>
