// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Verify OnapClamp Test the render method 1`] = `
<ThemeProvider
  theme={
    Object {
      "backgroundColor": "#eeeeee",
      "fontDanger": "#eb238e",
      "fontDark": "#888888",
      "fontFamily": "Arial, Sans-serif",
      "fontHighlight": "#ffff00",
      "fontLight": "#ffffff",
      "fontNormal": "black",
      "fontSize": "16px",
      "fontWarning": "#eb238e",
      "loopLogsHeaderBackgroundColor": "white",
      "loopLogsHeaderFontColor": "black",
      "loopViewerBackgroundColor": "white",
      "loopViewerFontColor": "yellow",
      "loopViewerHeaderBackgroundColor": "#337ab7",
      "loopViewerHeaderFontColor": "white",
      "menuBackgroundColor": "white",
      "menuFontColor": "black",
      "menuHighlightedBackgroundColor": "#337ab7",
      "menuHighlightedFontColor": "white",
      "toscaTextareaBackgroundColor": "#E8E8E8",
      "toscaTextareaFontSize": "13px",
    }
  }
>
  <styled.div
    id="main_div"
  >
    <GlobalStyleComponent />
    <Route
      path="/uploadToscaPolicyModal"
      render={[Function]}
    />
    <Route
      path="/viewToscaPolicyModal"
      render={[Function]}
    />
    <Route
      path="/ViewLoopTemplatesModal"
      render={[Function]}
    />
    <Route
      path="/ManageDictionaries"
      render={[Function]}
    />
    <Route
      path="/policyModal/:policyInstanceType/:policyName"
      render={[Function]}
    />
    <Route
      path="/createLoop"
      render={[Function]}
    />
    <Route
      path="/openLoop"
      render={[Function]}
    />
    <Route
      path="/loopProperties"
      render={[Function]}
    />
    <Route
      path="/modifyLoop"
      render={[Function]}
    />
    <Route
      path="/userInfo"
      render={[Function]}
    />
    <Route
      path="/closeLoop"
      render={[Function]}
    />
    <Route
      path="/submit"
      render={[Function]}
    />
    <Route
      path="/stop"
      render={[Function]}
    />
    <Route
      path="/restart"
      render={[Function]}
    />
    <Route
      path="/delete"
      render={[Function]}
    />
    <Route
      path="/undeploy"
      render={[Function]}
    />
    <Route
      path="/deploy"
      render={[Function]}
    />
    <Route
      path="/refreshStatus"
      render={[Function]}
    />
    <div />
    <div>
      <Alert
        closeLabel="Close alert"
        dismissible={true}
        onClose={[Function]}
        show={false}
        transition={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "appear": false,
              "in": false,
              "mountOnEnter": false,
              "timeout": 300,
              "unmountOnExit": false,
            },
            "displayName": "Fade",
            "render": [Function],
          }
        }
        variant="success"
      />
      <Alert
        closeLabel="Close alert"
        dismissible={true}
        onClose={[Function]}
        show={false}
        transition={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "appear": false,
              "in": false,
              "mountOnEnter": false,
              "timeout": 300,
              "unmountOnExit": false,
            },
            "displayName": "Fade",
            "render": [Function],
          }
        }
        variant="danger"
      />
    </div>
    <Navbar
      collapseOnSelect={false}
      expand={true}
      variant="light"
    >
      <NavbarBrand>
        <img
          alt=""
          height="50px"
          src={null}
          width="234px"
        />
        <styled.a>
          CLAMP
        </styled.a>
      </NavbarBrand>
      <NavbarToggle
        aria-controls="responsive-navbar-nav"
        label="Toggle navigation"
      />
      <MenuBar
        loopName="Empty (NO loop loaded yet)"
      />
      <NavbarText>
        <styled.a>
          Signed in as: 
        </styled.a>
        <Styled(Link)
          to="/userInfo"
        />
      </NavbarText>
    </Navbar>
    <styled.div>
      <styled.div>
        Loop Viewer - 
        Empty (NO loop loaded yet)
         - (
        )
      </styled.div>
      <styled.div>
        <withRouter(SvgGenerator)
          clickable={true}
          generatedFrom="INSTANCE"
          isBusyLoading={[Function]}
          loopCache={
            LoopCache {
              "loopJsonCache": Object {},
            }
          }
        />
        <LoopStatus
          loopCache={
            LoopCache {
              "loopJsonCache": Object {},
            }
          }
        />
        <LoopLogs
          loopCache={
            LoopCache {
              "loopJsonCache": Object {},
            }
          }
        />
      </styled.div>
    </styled.div>
  </styled.div>
</ThemeProvider>
`;
