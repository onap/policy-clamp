// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Verify MenuBar Test the render method 1`] = `
<NavbarCollapse>
  <Styled(NavDropdown)
    title="Loop Templates"
  >
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/ViewLoopTemplatesModal"
    >
      View All Templates
    </DropdownItem>
  </Styled(NavDropdown)>
  <Styled(NavDropdown)
    title="Policy Models"
  >
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/uploadToscaPolicyModal"
    >
      Upload Tosca Model
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/viewToscaPolicyModal"
    >
      View Tosca Models
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/ManageDictionaries"
    >
      Manage Metadata Dictionaries
    </DropdownItem>
  </Styled(NavDropdown)>
  <Styled(NavDropdown)
    title="Loop Instance"
  >
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/createLoop"
    >
      Create
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/openLoop"
    >
      Open
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/closeLoop"
    >
      Close
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/modifyLoop"
    >
      Modify
    </DropdownItem>
    <DropdownDivider
      role="separator"
    />
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/loopProperties"
    >
      Properties
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/refreshStatus"
    >
      Refresh Status
    </DropdownItem>
  </Styled(NavDropdown)>
  <Styled(NavDropdown)
    title="Loop Operations"
  >
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/submit"
    >
      Create and deploy to Policy Engine(SUBMIT)
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/stop"
    >
      Undeploy from Policy Engine (STOP)
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/restart"
    >
      ReDeploy to Policy Engine (RESTART)
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/delete"
    >
      Delete loop instance (DELETE)
    </DropdownItem>
    <DropdownDivider
      role="separator"
    />
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/deploy"
    >
      Deploy to DCAE (DEPLOY)
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/undeploy"
    >
      UnDeploy to DCAE (UNDEPLOY)
    </DropdownItem>
  </Styled(NavDropdown)>
  <Styled(NavDropdown)
    title="Help"
  >
    <Styled(NavLink)
      href="https://wiki.onap.org/"
      target="_blank"
    >
      Wiki
    </Styled(NavLink)>
    <Styled(NavLink)
      href="mailto:onap-discuss@lists.onap.org?subject=CLAMP&body=Please send us suggestions or feature enhancements or defect. If possible, please send us the steps to replicate any defect."
    >
      Contact Us
    </Styled(NavLink)>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "
	color: ",
              [Function],
              ";
	background-color: ",
              [Function],
              ";
	font-weight: normal;
	display: block;
	width: 100%;
	padding: .25rem 1.5rem;
	clear: both;
	text-align: inherit;
	white-space: nowrap;
	border: 0;
	:hover {
		text-decoration: none;
		background-color: ",
              [Function],
              ";
		color:  ",
              [Function],
              ";
	}
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/userInfo"
    >
      User Info
    </DropdownItem>
  </Styled(NavDropdown)>
</NavbarCollapse>
`;
