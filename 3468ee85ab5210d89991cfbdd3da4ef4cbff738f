{
  "comments": [
    {
      "key": {
        "uuid": "616ef12c_08124778",
        "filename": "runtime-controlloop/src/main/java/org/onap/policy/clamp/controlloop/runtime/commissioning/CommissioningProvider.java",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 811
      },
      "writtenOn": "2021-07-28T14:39:21Z",
      "side": 1,
      "message": "not sure this helps, as it appears to just re-processes the same initialNodeTypes over and over",
      "revId": "3468ee85ab5210d89991cfbdd3da4ef4cbff738f",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54b9d86c_b02e493b",
        "filename": "runtime-controlloop/src/main/java/org/onap/policy/clamp/controlloop/runtime/commissioning/CommissioningProvider.java",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 7603
      },
      "writtenOn": "2021-07-28T16:36:56Z",
      "side": 1,
      "message": "As mentioned in the previous comment, I do this to ensure that there are not types skipped due to the fact that their derived_from types have not been added to the filteredNodeTypes yet. note that the filtered node types are needed because they represent those node types that have common properties associated with them.\n\nThis does not cause duplication of entry into the filteredNodeTypes either as the putIfAbsent method is employed.",
      "parentUuid": "616ef12c_08124778",
      "revId": "3468ee85ab5210d89991cfbdd3da4ef4cbff738f",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76fa51e7_8f9a7d78",
        "filename": "runtime-controlloop/src/main/java/org/onap/policy/clamp/controlloop/runtime/commissioning/CommissioningProvider.java",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 811
      },
      "writtenOn": "2021-07-28T20:50:58Z",
      "side": 1,
      "message": "I don\u0027t see any merging happening here, as lines 259-262 simply make a copy of the derivedFrom type\u0027s properties.  Merging of properties can be done by creating a copy of the derivedFrom\u0027s properties and invoking putAll to add the current type\u0027s properties to the copy.  This avoids the need for the forEach on line 262.\n\nAlso, it looks to me like if initial only contained one node and filtered contained a hierarchy of 3+ types, then the properties of the types in filtered would not be merged into the types further down; only those found in initial would be merged down.\n\nAn alternative to using this O(N^2) loop would be to use a recursive function that looks up a given [derivedFrom] type in filterNodes and, not finding that, looks it up in initialNodes.  In the former case, it would simply return the properties that it found.  In the latter case, it would build the merged properties for the new type.",
      "parentUuid": "54b9d86c_b02e493b",
      "revId": "3468ee85ab5210d89991cfbdd3da4ef4cbff738f",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d49e73d8_7a6321e9",
        "filename": "runtime-controlloop/src/main/java/org/onap/policy/clamp/controlloop/runtime/commissioning/CommissioningProvider.java",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 7603
      },
      "writtenOn": "2021-07-29T10:02:56Z",
      "side": 1,
      "message": "Hi Jim.\n\nI have added the changes you suggested for 259-262. Thanks for that.\n\nFor the second paragraph of your comment, filtered will never contain more than initial. Initial is a list of all node types. At the start filtered is a list of those node types that have common properties associated with them and a \"Root\" type. Filtered is added to with derived types yes but will never be bigger than initial.\n\nI take your point on the recursion. Is it possible to leave this for a review when I come back from leave?",
      "parentUuid": "76fa51e7_8f9a7d78",
      "revId": "3468ee85ab5210d89991cfbdd3da4ef4cbff738f",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "913fb107_72176d32",
        "filename": "runtime-controlloop/src/main/java/org/onap/policy/clamp/controlloop/runtime/commissioning/CommissioningProvider.java",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 811
      },
      "writtenOn": "2021-07-29T12:49:40Z",
      "side": 1,
      "message": "yes, this can be addressed later, though I wouldn\u0027t even remember this discussion after returning from leave! :-)",
      "parentUuid": "d49e73d8_7a6321e9",
      "revId": "3468ee85ab5210d89991cfbdd3da4ef4cbff738f",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f2cd584_43d7c447",
        "filename": "runtime-controlloop/src/main/java/org/onap/policy/clamp/controlloop/runtime/commissioning/CommissioningProvider.java",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 7603
      },
      "writtenOn": "2021-07-29T12:59:36Z",
      "side": 1,
      "message": "XD Should be ok - only gone for a week",
      "parentUuid": "913fb107_72176d32",
      "revId": "3468ee85ab5210d89991cfbdd3da4ef4cbff738f",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e400ea6_82bcdb25",
        "filename": "runtime-controlloop/src/main/java/org/onap/policy/clamp/controlloop/runtime/commissioning/CommissioningProvider.java",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 811
      },
      "writtenOn": "2021-07-29T14:00:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6f2cd584_43d7c447",
      "revId": "3468ee85ab5210d89991cfbdd3da4ef4cbff738f",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}